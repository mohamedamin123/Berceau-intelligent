import axios from 'axios';
import { API_URL } from '@env';
import useAuthStore from '../store/useAuthStore'; // Import du store Zustand

const api = axios.create({
    baseURL: `${API_URL}/bebes`,
    headers: { 'Content-Type': 'application/json' },
});

// ðŸ“Œ Utilisation du token depuis Zustand
const getUserToken = () => {
    return useAuthStore.getState().token; // RÃ©cupÃ¨re le token depuis Zustand
};

// ðŸ“Œ Ajout automatique du token dans toutes les requÃªtes
api.interceptors.request.use(
    (config) => {
        const token = getUserToken();
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

// ðŸ“Œ Exemple d'utilisation pour crÃ©er un bÃ©bÃ©
export const createBebe = async (bebeData) => {
    try {
        const response = await api.post("/", bebeData);
        return response.data;
    } catch (error) {
        throw error.message;
    }
};

// ðŸ“Œ Exemple d'utilisation pour mettre Ã  jour un bÃ©bÃ©
export const updateBebe = async (bebeId, updateData) => {
    try {
        const response = await api.patch(`/${bebeId}`, updateData);
        return response.data;
    } catch (error) {
        throw error;
    }
};

// ðŸ“Œ Exemple d'utilisation pour obtenir un bÃ©bÃ© par ID
export const getBebeById = async (bebeId) => {
    try {
        const response = await api.get(`/${bebeId}`);
        return response.data;
    } catch (error) {
        throw error;
    }
};

// ðŸ“Œ Exemple d'utilisation pour obtenir tous les bÃ©bÃ©s
export const getAllBebes = async () => {
    try {
        const response = await api.get("/");
        return response.data;
    } catch (error) {
        throw error;
    }
};

// ðŸ“Œ Exemple d'utilisation pour supprimer un bÃ©bÃ©
export const deleteBebe = async (bebeId) => {
    try {
        const response = await api.delete(`/${bebeId}`);
        return response.data;
    } catch (error) {
        throw error;
    }
};

// ðŸ“Œ Exemple d'utilisation pour rÃ©cupÃ©rer les bÃ©bÃ©s par parent ID
export const getBebesByParentId = async (parentId) => {
    try {
        const response = await api.get(`/parent/${parentId}`);
        return response.data;
    } catch (error) {
        throw error;
    }
};

// ðŸ“Œ Exemple d'utilisation pour rÃ©cupÃ©rer un bÃ©bÃ© par ID de berceau
export const getBebeByBerceauId = async (berceauId) => {
    try {
        const response = await api.get(`/berceau/${berceauId}`);
        return response.data;
    } catch (error) {
        throw error;
    }
};


// ðŸ“Œ Exemple d'utilisation pour supprimer un bÃ©bÃ©
export const deleteAllBebeByBerceau = async (berceauId) => {
    try {
        const response = await api.delete(`/berceau/${berceauId}`);
        return response.data;
    } catch (error) {
        throw error;
    }
};

export default api;
